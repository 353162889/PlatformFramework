//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Launch_CTLNetWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("CTLNet");
		L.RegFunction("RegisterNetMsg", RegisterNetMsg);
		L.RegFunction("SendMsg", SendMsg);
		L.RegFunction("ConnectServer", ConnectServer);
		L.RegFunction("NetMsgHander", Launch_CTLNet_NetMsgHander);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterNetMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			Launch.CTLNet.NetMsgHander arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (Launch.CTLNet.NetMsgHander)ToLua.CheckObject(L, 3, typeof(Launch.CTLNet.NetMsgHander));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(Launch.CTLNet.NetMsgHander), func) as Launch.CTLNet.NetMsgHander;
			}

			Launch.CTLNet.RegisterNetMsg(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			LuaByteBuffer arg2 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 3));
			Launch.CTLNet.SendMsg(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			System.Action<bool> arg3 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<bool>)ToLua.CheckObject(L, 4, typeof(System.Action<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<bool>), func) as System.Action<bool>;
			}

			Launch.CTLNet.ConnectServer(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Launch_CTLNet_NetMsgHander(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(Launch.CTLNet.NetMsgHander), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(Launch.CTLNet.NetMsgHander), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

